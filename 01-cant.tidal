do
    let dens = 1
        melody = "{[0 4] 2 -24 ~ [ 4 11] ~ ~ [0] [14 16] ~ 11 ~ ~}%16"        
    p "synth" 
        $ (|+ note (slow 8  "<0 -2>")) $ density dens 
        $ sometimesBy 0 (stutWith (shiftBy 20 $ choose [1,2,3]) (0.125*3) (|+ note (shiftBy 44 $ choose [5,7,12,14]))) 
        $ (|+ note "-7") 
        $ slow 4 $ note melody 
        # cantChan # gain 1.15 # cps 0.6666666
    p "ccs" $ density dens $ stack [ 
        pan melody # ccv (range 0 127 $ slow 13.1 sine) # filter1
        , pan melody # ccv (range 127 127 $ slow 11.31 sine) # filter1width
        , pan melody # ccv (range 0 127 $ slow 12.25 sine) # filter1env
        , pan melody # ccv (range 70 127 $ slow 10.212 sine) # filter2
        , pan melody # ccv (range 0 127 $ slow 8.41 sine) # filter2width
        , pan melody # ccv (range 40 90 $ slow 9.587 sine) # filter2env
        , pan melody # ccv (range 60 127 $ slow 14.6801 sine) # detune
        , pan melody # ccv (range 64 64 $ slow 15 tri) # porta
        ] # cantChan
    let pat1 = "{0@3 1@6 0@3 1@13 0@3 0@6 0@3 0@3 0*2 0*2}%8"
        modr p = whenmod 20 17 (iter 8) $ every 2 rev $ p
    p "rytm"
        $ limit
        $ shift
        $ stack [
            -- rytmmap
            g $ one 0.3 $ modr $ (|+ note (slow 8 "<2 0>")) 
                $ rytmmap' [2,3] pat1 # note "c3"
            -- ch
            , g $ dg5 $ sb 0.9 (# pad12) 
                $ shift
                $ degradeBy "<0.2 0.5 0.3 0.4 0.1>" $ fast 2 $ struct "1(3,8)" $ pad11
            -- sd
            , g $ roll 0.3 $ slow 4 $ (0.75 ~>) $ pad2
            -- perc
            , g $ sb 0.2 (# pad8) 
                $ shift
                $ dg2
                $ struct (binaryN 16 "<2742323 23048239 1347284 92340234>") 
                $ pad7
            , fast 3.25 $ perf3flip
            , fast 4.25 $ randcat [normDelay, normDelay, randDelay]
            , fast 1.85 $ scene (randcat [0, 1, 2])
        ] # rytm




hush

